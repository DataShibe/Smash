package me.datashibe.Smash;

import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

class Smash {
	
	public static Command[] commands;
	public static boolean functionsStarted = false;

	public static void main(String[] args) throws Exception {
		File file = new File(System.getProperty("user.dir") + "/src/me/datashibe/Smash/testFile.Smash");
		Scanner fileScanner = new Scanner(file);
		
		String fileContent = "";
		while(fileScanner.hasNextLine()) {
			fileContent += fileScanner.nextLine() + "\n";
		}
		fileScanner.close();
		
		
		Command[] commands = Parser.parse(fileContent);
		Smash.commands = commands;
		for(Command command : commands) {
			System.out.println(command.toString() + ", ");
		}
		
		
		File newFile = new File(System.getProperty("user.dir") + "/src/me/datashibe/Smash/output.baabnq");
		if(!newFile.exists()) { newFile.createNewFile(); }
		
		FileWriter fileWriter = new FileWriter(newFile);
		String output = '"' + " This file was generated by the Smash Compiler v1 of DataShibe\n\n";
		for(Command command : commands) {
			output += Generator.generate(command) + "\n";
		}
		if(functionsStarted) { output += "lab exit;"; }
		fileWriter.write(output);
		fileWriter.flush();
		fileWriter.close();
	}
	
}


class Parser {
	
	public static Command[] parse(String fileContent) {
		String[] lines = fileContent.split("\n");
		ArrayList<Command> commands = new ArrayList<Command>(); 
		
		for(String line : lines) {
			line = line.split(";")[0].replace("   ", "");
			if(line.equals("")) { continue; }
			
			String[] parts = line.split(" ");
			Command cmd = new Command(null, null);
			
			if(line.contains("=") && line.split("=")[0].split(" ").length == 1) {
				cmd.name = "putVar";
				cmd.args = new String[] {parts[0], String.join(" ", Arrays.copyOfRange(parts, 2, parts.length))};
			
			} else if(line.startsWith("print")) {
				cmd.name = "print";
				cmd.args = new String[] {parts[0].replaceAll("[()]", "").replace("print", "")};
			
			} else if(line.startsWith("func")) {
				if(!Smash.functionsStarted) {
					Command nCommand = new Command("exit", new String[] {});
					commands.add(nCommand);
					Smash.functionsStarted = true;
				}
				
				cmd.name = "function";
				
				if(line.contains("()")) { 
					cmd.args = new String[] {parts[1].split("\\(")[0]}; 
				}else {
					cmd.args = new String[] {parts[1].split("\\(")[0], line.split("\\)")[0].split("\\(")[1]};
				}
				
			} else if(line.equals("}")) {
				cmd.name = "end";
				cmd.args = new String[] {};
				
			} else if(line.contains("(") && line.contains(")")) {
				cmd.name = "callFunct";

				if(line.contains("()")) { 
					cmd.args = new String[] {parts[0].split("\\(")[0]}; 
				}else {
					cmd.args = new String[] {parts[0].split("\\(")[0], line.split("\\)")[0].split("\\(")[1]};
				}
				
			}
			
			
			commands.add(cmd);
		}
		
		return commands.toArray(new Command[commands.size()]);
	}
	
}


class Command {
	
	String name;
	String[] args;
	
	public Command(String name, String[] args) {
		this.name = name;
		this.args = args;
	}
	
	public String toString() {
		return "[" + this.name + ", {" + String.join(", ", this.args) + "}]";
	}
	
}


class Generator {
	
	public static String generate(Command cmd) {
		String output = "";
		
		switch(cmd.name) {
		
		case "putVar":
			output = "put _" + cmd.args[0] + " = " + cmd.args[1] + ";";
			break;
			
		case "print":
			output = "print _" + cmd.args[0] + ";";
			break;
			
		case "function":
			output = "\nlab " + cmd.args[0] + ";";
			String[] callArgs = cmd.args[1].split(", ");
			
			if(callArgs.length == 0) { break; }
			
			output += "\npull _returnAddr;";
			for(int i = callArgs.length - 1; i >= 0; i--) {
				output += "\npull _" + callArgs[i] + ";";
			}
			output += "\npush _returnAddr;\n";
			
			break;
		
		case "callFunct":
			String[] args = cmd.args[1].split(", ");
			for(int i = 0; i < args.length; i++) {
				output += "\npush _" + args[i] + ";";
			}
			output += "\nsub " + cmd.args[0] + ";";
			
			break;
			
		case "exit":
			output = "jump exit;";
			break;
		
		case "end":
			output = "\nreturn;\n";
		}
		
		return output;
	}
	
}
